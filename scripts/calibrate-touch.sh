#!/bin/bash

# Touch Calibration Script for Efficient RPi Display Driver
# Copyright (C) 2024 Efficient RPi Display Project
# Licensed under GPL-3.0

set -e

# Configuration
CALIBRATION_FILE="/etc/efficient-rpi-display/touch_calibration.conf"
CALIBRATION_DIR="$(dirname "$CALIBRATION_FILE")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

# Check if running as root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "This script must be run as root (use sudo)"
        exit 1
    fi
}

# Create calibration directory
create_calibration_dir() {
    mkdir -p "$CALIBRATION_DIR"
}

# Simple touch calibration (basic version)
calibrate_touch() {
    log_info "Starting touch calibration..."
    log_info "This is a basic calibration utility."
    log_info "For advanced calibration, use the display test program."
    
    # Default calibration values
    local x_min=200
    local x_max=3900
    local y_min=200
    local y_max=3900
    local swap_xy=false
    local invert_x=false
    local invert_y=false
    
    echo
    log_info "Current calibration values:"
    echo "X Min: $x_min"
    echo "X Max: $x_max"
    echo "Y Min: $y_min"
    echo "Y Max: $y_max"
    echo "Swap XY: $swap_xy"
    echo "Invert X: $invert_x"
    echo "Invert Y: $invert_y"
    echo
    
    # Ask user if they want to modify values
    read -p "Would you like to modify these values? (y/n): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "Enter new calibration values (press Enter to keep current value):"
        
        read -p "X Min [$x_min]: " input
        [[ -n "$input" ]] && x_min="$input"
        
        read -p "X Max [$x_max]: " input
        [[ -n "$input" ]] && x_max="$input"
        
        read -p "Y Min [$y_min]: " input
        [[ -n "$input" ]] && y_min="$input"
        
        read -p "Y Max [$y_max]: " input
        [[ -n "$input" ]] && y_max="$input"
        
        read -p "Swap XY? (y/n) [$swap_xy]: " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            swap_xy=true
        elif [[ $REPLY =~ ^[Nn]$ ]]; then
            swap_xy=false
        fi
        
        read -p "Invert X? (y/n) [$invert_x]: " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            invert_x=true
        elif [[ $REPLY =~ ^[Nn]$ ]]; then
            invert_x=false
        fi
        
        read -p "Invert Y? (y/n) [$invert_y]: " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            invert_y=true
        elif [[ $REPLY =~ ^[Nn]$ ]]; then
            invert_y=false
        fi
    fi
    
    # Save calibration
    save_calibration "$x_min" "$x_max" "$y_min" "$y_max" "$swap_xy" "$invert_x" "$invert_y"
    
    log_success "Touch calibration saved"
    log_info "Calibration file: $CALIBRATION_FILE"
    log_info "Test your calibration with: sudo touch_test"
}

# Save calibration to file
save_calibration() {
    local x_min="$1"
    local x_max="$2"
    local y_min="$3"
    local y_max="$4"
    local swap_xy="$5"
    local invert_x="$6"
    local invert_y="$7"
    
    cat > "$CALIBRATION_FILE" << EOF
# Touch Calibration Configuration
# Generated by calibrate-touch.sh
# $(date)

[calibration]
x_min = $x_min
x_max = $x_max
y_min = $y_min
y_max = $y_max
swap_xy = $swap_xy
invert_x = $invert_x
invert_y = $invert_y
EOF
    
    log_info "Calibration saved to $CALIBRATION_FILE"
}

# Load existing calibration
load_calibration() {
    if [[ -f "$CALIBRATION_FILE" ]]; then
        log_info "Loading existing calibration from $CALIBRATION_FILE"
        cat "$CALIBRATION_FILE"
    else
        log_info "No existing calibration found"
    fi
}

# Reset calibration to defaults
reset_calibration() {
    log_warn "Resetting calibration to default values..."
    save_calibration 200 3900 200 3900 false false false
    log_success "Calibration reset to defaults"
}

# Display help
show_help() {
    echo "Touch Calibration Script for Efficient RPi Display Driver"
    echo ""
    echo "Usage: $0 [OPTIONS]"
    echo ""
    echo "OPTIONS:"
    echo "  -h, --help       Show this help message"
    echo "  -c, --calibrate  Run touch calibration"
    echo "  -r, --reset      Reset calibration to defaults"
    echo "  -s, --show       Show current calibration"
    echo "  -l, --load       Load calibration from file"
    echo ""
    echo "Examples:"
    echo "  sudo $0 --calibrate    # Run calibration wizard"
    echo "  sudo $0 --reset        # Reset to defaults"
    echo "  sudo $0 --show         # Show current settings"
    echo ""
}

# Main function
main() {
    case "${1:-}" in
        -h|--help)
            show_help
            exit 0
            ;;
        -c|--calibrate)
            check_root
            create_calibration_dir
            calibrate_touch
            ;;
        -r|--reset)
            check_root
            create_calibration_dir
            reset_calibration
            ;;
        -s|--show)
            load_calibration
            ;;
        -l|--load)
            load_calibration
            ;;
        "")
            # Default action: calibrate
            check_root
            create_calibration_dir
            calibrate_touch
            ;;
        *)
            log_error "Unknown option: $1"
            show_help
            exit 1
            ;;
    esac
}

# Run main function
main "$@" 